// Email service for sending order reports
export interface EmailData {
  to: string
  subject: string
  html: string
  attachments?: { filename: string; content: string }[]
}

export const sendOrderReport = async (
  recipientEmail: string,
  orderItems: any[],
  organizationName: string,
  supplierName?: string
) => {
  const reportDate = new Date().toLocaleDateString()
  const totalItems = orderItems.length
  const totalUnits = orderItems.reduce((sum, item) => sum + item.needed_quantity, 0)

  // Build the items HTML safely without deeply nested template strings
  const groupedByCategory = orderItems.reduce((groups: Record<string, any[]>, item: any) => {
    const category = item.category_name || 'Uncategorized'
    if (!groups[category]) groups[category] = []
    groups[category].push(item)
    return groups
  }, {})

  let itemsHtml = ''
  for (const [category, items] of Object.entries(groupedByCategory) as [string, any[]][]) {
    itemsHtml += `<div class="category">${category}</div>`
    itemsHtml += items.map((item: any) => {
      const locations = Array.isArray(item.rooms_with_stock) && item.rooms_with_stock.length > 0
        ? `<br><small>Current locations: ${item.rooms_with_stock.map((r: any) => `${r.room_name} (${r.count})`).join(', ')}</small>`
        : ''
      return `
        <div class="item">
          <strong>${item.brand}</strong><br>
          Current Stock: <span class="urgent">${item.current_stock}</span> |
          Threshold: ${item.threshold} |
          Par Level: ${item.par_level}<br>
          <strong class="urgent">Order Quantity: ${item.needed_quantity} units</strong>
          ${locations}
        </div>
      `
    }).join('')
  }

  const isSupplierSpecific = !!supplierName
  const emailTitle = isSupplierSpecific 
    ? `üìã Order Request - ${supplierName}` 
    : `üìã Order Report`

  const htmlContent = `
    <!DOCTYPE html>
    <html>
    <head>
      <style>
        body { font-family: Arial, sans-serif; color: #333; }
        .header { background: #1e293b; color: white; padding: 20px; text-align: center; }
        .supplier-header { background: #7c3aed; color: white; padding: 15px; margin: 20px 0; border-radius: 8px; }
        .summary { background: #f1f5f9; padding: 15px; margin: 20px 0; border-radius: 8px; }
        .item { border-bottom: 1px solid #e2e8f0; padding: 15px 0; }
        .category { font-weight: bold; color: #1e293b; margin-top: 20px; }
        .urgent { color: #dc2626; font-weight: bold; }
        .footer { margin-top: 30px; padding: 20px; background: #f8fafc; text-align: center; color: #64748b; }
        .supplier-info { background: #ecfdf5; padding: 10px; border-left: 4px solid #10b981; margin: 10px 0; }
      </style>
    </head>
    <body>
      <div class="header">
        <h1>${emailTitle}</h1>
        <p>${organizationName} ‚Ä¢ ${reportDate}</p>
      </div>

      ${isSupplierSpecific ? `
        <div class="supplier-header">
          <h2>üè™ Order Request for ${supplierName}</h2>
          <p>Please process the following order for our establishment.</p>
        </div>
      ` : ''}

      <div class="summary">
        <h3>üìä Order Summary</h3>
        <ul>
          <li><strong>${totalItems}</strong> items need to be ordered</li>
          <li><strong>${totalUnits}</strong> total units required</li>
          <li>Generated: ${new Date().toLocaleString()}</li>
          ${isSupplierSpecific ? `<li>Supplier: <strong>${supplierName}</strong></li>` : ''}
        </ul>
      </div>

      ${totalItems === 0 ? `
        <div style="text-align: center; padding: 40px;">
          <h2>üéâ No Orders Needed!</h2>
          <p>All inventory items are above their threshold levels.</p>
        </div>
      ` : `
        <h3>üõí Items to Order</h3>
        ${isSupplierSpecific ? `
          <div class="supplier-info">
            <strong>Delivery Instructions:</strong><br>
            Please deliver to ${organizationName}<br>
            Contact for delivery questions: Management<br>
            Preferred delivery time: Business hours
          </div>
        ` : ''}
        ${itemsHtml}
      `}

      <div class="footer">
        <p>Generated by Liquor Inventory Manager</p>
        <p>This is an automated ${isSupplierSpecific ? 'order request' : 'report'} based on current inventory counts and threshold levels.</p>
        ${isSupplierSpecific ? `
          <p><strong>Please confirm receipt of this order and provide delivery timeline.</strong></p>
        ` : ''}
      </div>
    </body>
    </html>
  `

  // For now, we'll use a simple API endpoint (you'd integrate with SendGrid, Mailgun, etc.)
  try {
    const response = await fetch('/api/send-email', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        to: recipientEmail,
        subject: isSupplierSpecific 
          ? `Order Request - ${organizationName} - ${reportDate}`
          : `Order Report - ${organizationName} - ${reportDate}`,
        html: htmlContent,
        supplierName: supplierName
      })
    })

    if (!response.ok) {
      throw new Error('Failed to send email')
    }

    return { success: true }
  } catch (error: any) {
    console.error('Email send error:', error)
    return { success: false, error: error.message }
  }
}
